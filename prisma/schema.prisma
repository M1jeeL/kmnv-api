// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  name             String
  phoneNumber      String?
  registrationDate DateTime          @default(now())
  hashedRt         String?
  role             UserRole
  addresses        Address[]
  orders           Order[]
  cartItems        CartItem[]
  digitalDownloads DigitalDownload[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  images           UserImage[] // Relación con imágenes del usuario

  @@map("users")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model UserImage {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  imageUrl  String // URL de la imagen en el S3 de AWS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id            Int             @id @default(autoincrement())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  addressLine   String
  postalCode    String
  countryId     Int
  stateId       Int
  cityId        Int
  districtId    Int?
  country       Country         @relation(fields: [countryId], references: [id])
  state         State           @relation(fields: [stateId], references: [id])
  city          City            @relation(fields: [cityId], references: [id])
  district      District?       @relation(fields: [districtId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Order         Order[]
  StockLocation StockLocation[]
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  states  State[]
  Address Address[]
}

model State {
  id        Int       @id @default(autoincrement())
  name      String
  countryId Int
  country   Country   @relation(fields: [countryId], references: [id])
  cities    City[]
  Address   Address[]
}

model City {
  id        Int        @id @default(autoincrement())
  name      String
  stateId   Int
  state     State      @relation(fields: [stateId], references: [id])
  districts District[]
  Address   Address[]
}

model District {
  id      Int       @id @default(autoincrement())
  name    String
  cityId  Int
  city    City      @relation(fields: [cityId], references: [id])
  Address Address[]
}

model Product {
  id                Int               @id @default(autoincrement())
  name              String
  description       String?
  barcode           String?
  cost              Float?
  price             Float
  comparePrice      Float?
  revenue           Float?
  margin            Float?
  isPhysical        Boolean           @default(false)
  isTaxable         Boolean           @default(false)
  trackStock        Boolean           @default(false)
  weight            Float?
  sku               String?
  status            ProductStatus
  slug              String            @unique
  category          ProductCategory   @relation(fields: [productCategoryId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  cartItems         CartItem[]
  orderItems        OrderItem[]
  variants          ProductVariant[]
  productCategoryId Int
  digitalDownloads  DigitalDownload[]
  images            ProductImage[]
}

enum ProductStatus {
  DRAFT
  AVAILABLE
}

model ProductImage {
  id        Int             @id @default(autoincrement())
  productId Int?
  variantId Int?
  imageUrl  String // URL de la imagen en el S3 de AWS
  isPrimary Boolean         @default(false) // Indica si es la imagen principal
  product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ProductVariant {
  id        Int                    @id @default(autoincrement())
  productId Int
  price     Float?
  cost      Float?
  margin    Float?
  barcode   String?
  sku       String?
  stock     Int                    @default(0)
  product   Product                @relation(fields: [productId], references: [id])
  options   ProductVariantOption[]
  stocks    Stock[]
  images    ProductImage[] // Relación con imágenes específicas de la variante
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  cartItem  CartItem[]
  orderItem OrderItem[]
}

model ProductVariantOption {
  id        Int            @id @default(autoincrement())
  name      String
  value     String
  variantId Int
  variant   ProductVariant @relation(fields: [variantId], references: [id])
}

model StockLocation {
  id        Int      @id @default(autoincrement())
  name      String
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])
  stocks    Stock[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stock {
  id            Int            @id @default(autoincrement())
  variantId     Int
  locationId    Int
  stockQuantity Int            @default(0)
  reservedStock Int            @default(0)
  incomingStock Int            @default(0)
  variant       ProductVariant @relation(fields: [variantId], references: [id])
  location      StockLocation  @relation(fields: [locationId], references: [id])
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())

  @@unique([variantId, locationId])
}

model Variant {
  id      Int             @id @default(autoincrement())
  name    String
  options VariantOption[]
}

model VariantOption {
  id        Int     @id @default(autoincrement())
  value     String
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id])
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  description String?
  products Product[]
}

model CartItem {
  id        Int             @id @default(autoincrement())
  userId    String
  productId Int?
  variantId Int?
  quantity  Int             @default(1)
  user      User            @relation(fields: [userId], references: [id])
  product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now())
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  addressId   Int
  status      OrderStatus @default(PENDING)
  totalAmount Float
  user        User        @relation(fields: [userId], references: [id])
  address     Address     @relation(fields: [addressId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  orderId   String
  productId Int?
  variantId Int?
  quantity  Int
  price     Float
  product   Product?        @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  order     Order           @relation(fields: [orderId], references: [id])
  createdAt DateTime        @default(now())
}

model DigitalDownload {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
